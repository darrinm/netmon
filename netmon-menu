#!/bin/bash

# netmon-menu - Interactive Network Monitor Menu
# Provides an interactive menu interface for network monitoring

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m'

# Configuration
DEFAULT_HOST="8.8.8.8"
DEFAULT_INTERVAL="30"
CURRENT_HOST="$DEFAULT_HOST"
CURRENT_INTERVAL="$DEFAULT_INTERVAL"

# Check dependencies
check_deps() {
    if ! command -v node &> /dev/null; then
        echo -e "${RED}Error: Node.js is not installed${NC}"
        exit 1
    fi

    if [ ! -d "node_modules" ]; then
        echo -e "${CYAN}Installing dependencies...${NC}"
        npm install
        clear
    fi
}

# Show banner
show_banner() {
    clear
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë        üåê NETWORK MONITOR üåê          ‚ïë"
    echo "‚ïë     Real-time Connection Quality      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Show menu
show_menu() {
    echo -e "${BOLD}Main Menu:${NC}"
    echo
    echo -e "  ${GREEN}1)${NC} Start Monitoring"
    echo -e "  ${GREEN}2)${NC} View Statistics"
    echo -e "  ${GREEN}3)${NC} View History"
    echo -e "  ${GREEN}4)${NC} View Outages"
    echo -e "  ${GREEN}5)${NC} Quick Status Check"
    echo -e "  ${GREEN}6)${NC} Configure Settings"
    echo -e "  ${GREEN}7)${NC} Clear Data"
    echo -e "  ${GREEN}0)${NC} Exit"
    echo
    echo -e "${CYAN}Current Settings:${NC} Host: ${YELLOW}$CURRENT_HOST${NC}, Interval: ${YELLOW}${CURRENT_INTERVAL}s${NC}"
    echo
}

# Quick status check
quick_status() {
    show_banner
    echo -e "${CYAN}Performing quick network check...${NC}"
    echo
    
    # Quick ping test
    echo -e "${BLUE}Testing connection to $CURRENT_HOST...${NC}"
    if ping -c 1 -W 2 "$CURRENT_HOST" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì Connection: OK${NC}"
        
        # Get average ping time
        AVG_PING=$(ping -c 5 -W 2 "$CURRENT_HOST" | tail -1 | awk -F '/' '{print $5}' 2>/dev/null)
        if [ ! -z "$AVG_PING" ]; then
            echo -e "${GREEN}‚úì Average Ping: ${AVG_PING}ms${NC}"
        fi
    else
        echo -e "${RED}‚úó Connection: FAILED${NC}"
    fi
    
    # DNS test
    echo -e "\n${BLUE}Testing DNS resolution...${NC}"
    if nslookup google.com > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì DNS: OK${NC}"
    else
        echo -e "${RED}‚úó DNS: FAILED${NC}"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Configuration menu
configure_menu() {
    while true; do
        show_banner
        echo -e "${BOLD}Configuration:${NC}"
        echo
        echo -e "  ${GREEN}1)${NC} Change Host (current: ${YELLOW}$CURRENT_HOST${NC})"
        echo -e "  ${GREEN}2)${NC} Change Interval (current: ${YELLOW}${CURRENT_INTERVAL}s${NC})"
        echo -e "  ${GREEN}3)${NC} Reset to Defaults"
        echo -e "  ${GREEN}0)${NC} Back to Main Menu"
        echo
        
        read -p "Select option: " config_choice
        
        case $config_choice in
            1)
                echo
                read -p "Enter new host to monitor: " new_host
                if [ ! -z "$new_host" ]; then
                    CURRENT_HOST="$new_host"
                    echo -e "${GREEN}‚úì Host changed to: $CURRENT_HOST${NC}"
                    sleep 1
                fi
                ;;
            2)
                echo
                read -p "Enter new interval in seconds: " new_interval
                if [[ "$new_interval" =~ ^[0-9]+$ ]] && [ "$new_interval" -gt 0 ]; then
                    CURRENT_INTERVAL="$new_interval"
                    echo -e "${GREEN}‚úì Interval changed to: ${CURRENT_INTERVAL}s${NC}"
                    sleep 1
                else
                    echo -e "${RED}Invalid interval. Please enter a positive number.${NC}"
                    sleep 2
                fi
                ;;
            3)
                CURRENT_HOST="$DEFAULT_HOST"
                CURRENT_INTERVAL="$DEFAULT_INTERVAL"
                echo -e "${GREEN}‚úì Settings reset to defaults${NC}"
                sleep 1
                ;;
            0)
                break
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                sleep 1
                ;;
        esac
    done
}

# Stats submenu
stats_menu() {
    while true; do
        show_banner
        echo -e "${BOLD}Statistics Period:${NC}"
        echo
        echo -e "  ${GREEN}1)${NC} Last Hour"
        echo -e "  ${GREEN}2)${NC} Last 24 Hours"
        echo -e "  ${GREEN}3)${NC} Last 7 Days"
        echo -e "  ${GREEN}4)${NC} All Time"
        echo -e "  ${GREEN}0)${NC} Back to Main Menu"
        echo
        
        read -p "Select period: " stats_choice
        
        case $stats_choice in
            1)
                npm run dev stats -- --period 1
                ;;
            2)
                npm run dev stats -- --period 24
                ;;
            3)
                npm run dev stats -- --period 168
                ;;
            4)
                npm run dev stats -- --period 0
                ;;
            0)
                break
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                sleep 1
                continue
                ;;
        esac
        
        echo
        read -p "Press Enter to continue..."
    done
}

# Main loop
main() {
    check_deps
    
    while true; do
        show_banner
        show_menu
        
        read -p "Select option: " choice
        
        case $choice in
            1)
                show_banner
                echo -e "${GREEN}Starting network monitor...${NC}"
                echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
                echo
                npm run dev monitor -- --host "$CURRENT_HOST" --interval "$CURRENT_INTERVAL"
                ;;
            2)
                stats_menu
                ;;
            3)
                show_banner
                echo -e "${CYAN}Recent Monitoring History:${NC}"
                echo
                npm run dev history -- --number 20
                echo
                read -p "Press Enter to continue..."
                ;;
            4)
                show_banner
                echo -e "${CYAN}Outage History:${NC}"
                echo
                npm run dev outages
                echo
                read -p "Press Enter to continue..."
                ;;
            5)
                quick_status
                ;;
            6)
                configure_menu
                ;;
            7)
                show_banner
                echo -e "${YELLOW}‚ö†Ô∏è  Clear all monitoring data?${NC}"
                echo -e "${RED}This action cannot be undone!${NC}"
                echo
                read -p "Type 'yes' to confirm: " confirm
                if [ "$confirm" = "yes" ]; then
                    npm run dev clear
                    echo -e "${GREEN}‚úì All data cleared${NC}"
                else
                    echo -e "${BLUE}Cancelled${NC}"
                fi
                sleep 2
                ;;
            0|q|Q)
                show_banner
                echo -e "${GREEN}Thanks for using Network Monitor!${NC}"
                echo
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Run main function
main